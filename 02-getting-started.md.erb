---
title: Notiuni de baza
slug: getting-started
date: 0002/01/01
number: 2
contents: Instaleaza Meteor.|Invata despre cele 5 tipuri de pachete Meteor.|Configureaza structura de fisiere a unei aplicatii Meteor.
paragraphs: 49
---

Primele impresii sunt importante, iar procesul de instalare Meteor ar trebui sa fie relativ simplu. In cele mai multe cazuri, vei putea rula o aplicatie in mai putin de cinci minute.

Pentru a incepe, se poate instala Meteor deschizand o fereastra consola si tastand:

~~~bash
$ curl https://install.meteor.com | sh
~~~

Aceasta va instala executabilul `meteor` in sistemul tau si te va pregati pentru a rula Meteor.

<% note do %>

### *Fara* sa instalezi Meteor

Daca nu poti (sau nu vrei) sa instalezi Meteor pe sistemul local, iti recomandam sa incerci [Nitrous.io](http://nitrous.io).

Nitrous.io este un serviciu unde poti rula si edita aplicatii direct in browser, iar noi avem scris [un scurt gid] (https://www.discovermeteor.com/2013/10/04/meteor-nitrous/) pentru a te putea ajuta cum sa incepi.

Poti urmari acel ghid pentru a instala Meteor, apoi parcurge cartea incepand cu capitolul "Creeaza o simpla apliatie".

<% end %>

### Crearea unei aplicatii simple

Acum ca avem instalat Meteor, sa cream o aplicatie. Pentru a face asta vom folosi comanda `meteor`:

~~~bash
$ meteor create microscope
~~~

Aceasta comanda va descarca Meteor, si va configura un simplu proiect pentru tine. Cand este gata, vei putea vedea un director, `microscope/`, continand urmatoarele:

~~~bash
microscope.css
microscope.html
microscope.js
~~~

Aplicatie pe care Meteor a creat-o pentru tine este un simplu sablon demonstrand cateva simple modele de lucru.

Chiar daca aplicatia nu face multe, o putem rula. Pentru a face asa, reintoarce-te la terminal si ruleaza:

~~~bash
$ cd microscope
$ meteor
~~~

Acum in browser acceseaza adresa `http://localhost:3000/` (sau echivalentul `http://0.0.0.0:3000/`) si vei putea vedea ceva de genul asta:

<%= screenshot "2-1", "Meteor's Hello World." %>

<%= commit "2-1", "Created basic microscope project." %>

Felicitari! Ai rulat prima ta aplicatie Meteor. Apropo, pentru a opri aplicatia trebuie sa accesezi fereastra terminal de unde ai rulat Meteor si sa apesi `ctrl+c`.

<% note do %>

### La revedere Meteorite

Obișnuia să fie o vreme când Meteor se baza pe un manager extern de pachete numit Meteorite. De la versiunea 0.9.0, Meteorite nu mai este necesar deoarece funcțiile sale au fost asimilate de pachetul de bază Meteor.

Așa că dacă întâlnești referințe spre comanda `mrt` prin carte sau pe internet, poți să o substitui fără probleme cu `meteor`.

<% end %>

### Adauga un pachet

In continuare vom folosi Meteorite pentru a adauga pachetul [Bootstrap](http://getbootstrap.com/) aplicatiei create:

~~~bash
$ meteor add bootstrap
~~~

<%= commit "2-2", "Added bootstrap package." %>

<% note do %>

### O nota despre pachete

Cand vorbim despre pachete in contextul Meteor, este bine sa fim specifici. Meteor foloseste cinci tipuri de pachete de baza:

- Codul principal Meteor este impartit diferite **pachete nucleu**. Ele sunt incluse in fiecare aplicatie Meteor, si nu le vei purta niciodata girja
- **pachetele destepte** sunt un grup de [aproape 37 de pachete](http://docs.meteor.com/#packages) (poti vedea lista intreaga cu `meteor list`) care vin odata cu Meteor si pe care optional le poti importa in aplicatia ta folosind comanda `meteor add numepachet`.
- **pachete locale** sunt pachete create de tine si care se gasesc in directorul `/packages`.
- **pachetele inteligente Atmosphere** sunt pachete de la terti listate pe [Atmosphere](http://atmosphere.meteor.com).
- **pachete NPM** (Node Packaged Modules) sunt pachete ale Node.js. Desi ele nu merg din prima folosite in Meteor, ele pot fi folosite de pachetele anterioare.

<% end %>

### Structura de fisiere a unei aplicatii Meteor

Inainte de a incepe sa programam, avem nevoie sa configuram proiectul cum trebuie. Pentru a ne asigura ca avem o constructie curata, deschide directorul `microscope` si sterge fisierul `microscope.html`, `microscope.js`, si `microscope.css`.

In continuare, creeaza cinci directoare in cadrul `/microscope`: `/client`, `/server`, `/public`, `/lib`, si `/collections`, si deasemenea creaza fisierele goale numite `main.html` si `main.js` in interiorul directorului `/client`. Nu-ti fa griji daca aplicatia nu merge, vom incepe sa populam fisierele in capitolul urmator.

Trebuie sa mentionam ca unele directoare au un caracter special. Cand vine vorba de fisiere, Meteor are cateva reguli:

- Codul din directorul `/server` va rula numai pe server.
- Codul din directorul `/client` va rula numai pe client.
- Toate celelalte ruleaza atat pe client cat si pe server.
- Fisierele din `/lib` sunt incarcate inaintea tuturor celorlalte.
- Orice fisier `main.*` este incarcat dupa toate celelalte.
- Fisierele statice (fonturi, imagini, etc) trebuiesc puse in directorul `/public`.

Chiar daca Meteor are aceste reguli, totusi nu te forteaza sa folosesti structuri predefinite de directoare pentru aplicatia ta daca tu nu vrei. Asa ca structura propusa mai sus este doar o cale de a face lucrurile, si nimic batut in cuie.

Te incurajam sa folosesti [documentatia oficiala Meteor](http://docs.meteor.com/#structuringyourapp) daca vrei sa vezi mai multe detalii pe aceasta tema.

<% note do %>

### Este Meteor MVC?

Daca ai venit sa folosesti Meteor din alte arhitecturi cum ar fi Ruby on Rails, te poti intreba daca Meteor adopta modelul MVC (Model View Controller).

Raspunsul scurt este ca nu. Fata de Ruby on Rails, Meteor nu impune o structura predefinita a aplicatiei. Asa ca in cartea de fata vom adauga codul in asa fel incat are cel mai mult sens pentru noi, fara a ne ingrijora foarte mult acronimele.

<% end %>

### Fara public?

Bine, am mintit. Nu ne trebuie neaparat directorul `public/` pentru simplul motiv ca Microscope nu foloseste niciun fisier static! Dar pentru ca alte aplicatii Meteor vor folosi cel putin cateva imagini, ne-am gandit ca este important de mentionat.

Deasemenea, vei putea vedea si un director ascuns `.meteor`. Aici este locul unde Meteor isi tine propriul cod, iar modificand aceste fisiere este probabil o idee foarte proasta. De fapt, nici nu este macar nevoie sa te uiti in acest director. Singura exceptie sunt fisierele din directoarele `.meteor/packages` si '.meteor/release`, care sunt folosite pentru a lista pachetele folosite si versiunea curenta a aplicatiei Meteor. Cand adaugi noi pachete sau cand versiunea de Meteor se schimba, poate fi util sa verifici aceste fisiere.

<% note do %>

### Underscores vs CamelCase

Singurul lucru pe care il putem spune despre vechea dezbatere a notatiilor variabila_mea versus variabilaMea este acela ca nu prea conteaza ce folosesti atata timp cat esti consistent in notatii.

In aceasta carte vom folosi camelCase pentru ca este uzual folosit in JavaScript (pana la urma, este scris JavaScript si nu java_script!).

Singura exceptie de la aceasta regula sunt numele de fisiere, unde vom folosi underscores (`my_files.js`), si clasele CSS, care folosesc cratima (`.my-class`). Motivul este pentru ca in sistem underscores (liniuta jos) sunt cele mai folosite, iar in CSS syntaxa deja foloseste cratime (`font-family`, `text-align`, etc.).

<% end %>

### Avand grija de CSS

Aceasta carte nu este despre CSS. Asa ca avand grija sa nu te ingreunam cu detaliile despre CSS am decis sa facem stilul disponibil inca de la inceput, asa ca nu va mai trebui sa te ingrijorezi de el vreodata.

CSS se incarca automat minimalizat de catre Meteor, asa ca orice alt fisier intra in directorul `/client`, si nu `/public`. Incepe prin a crea directorul `client/stylesheets/` acum, si pune in interiorul fisierului `style.css` codul de mai jos:

~~~css
.grid-block, .main, .post, .comments li, .comment-form {
    background: #fff;
    border-radius: 3px;
    padding: 10px;
    margin-bottom: 10px;
    box-shadow: 0 1px 1px rgba(0, 0, 0, 0.15);
}
body {
    background: #eee;
    color: #666666;
}
.navbar { margin-bottom: 10px }
.navbar .navbar-inner {
    border-radius: 0px 0px 3px 3px;
}
#spinner { height: 300px }
.post {
    *zoom: 1;
    -webkit-transition: all 300ms 0ms;
    -webkit-transition-delay: ease-in;
    -moz-transition: all 300ms 0ms ease-in;
    -o-transition: all 300ms 0ms ease-in;
    transition: all 300ms 0ms ease-in;
    position: relative;
    opacity: 1;
}
.post:before, .post:after {
    content: "";
    display: table;
}
.post:after { clear: both }
.post.invisible { opacity: 0 }
.post .upvote {
    display: block;
    margin: 7px 12px 0 0;
    float: left;
}
.post .post-content { float: left }
.post .post-content h3 {
    margin: 0;
    line-height: 1.4;
    font-size: 18px;
}
.post .post-content h3 a {
    display: inline-block;
    margin-right: 5px;
}
.post .post-content h3 span {
    font-weight: normal;
    font-size: 14px;
    display: inline-block;
    color: #aaaaaa;
}
.post .post-content p { margin: 0 }
.post .discuss {
    display: block;
    float: right;
    margin-top: 7px;
}
.comments {
    list-style-type: none;
    margin: 0;
}
.comments li h4 {
    font-size: 16px;
    margin: 0;
}
.comments li h4 .date {
    font-size: 12px;
    font-weight: normal;
}
.comments li h4 a { font-size: 12px }
.comments li p:last-child { margin-bottom: 0 }
.dropdown-menu span {
    display: block;
    padding: 3px 20px;
    clear: both;
    line-height: 20px;
    color: #bbb;
    white-space: nowrap;
}
.load-more {
    display: block;
    border-radius: 3px;
    background: rgba(0, 0, 0, 0.05);
    text-align: center;
    height: 60px;
    line-height: 60px;
    margin-bottom: 10px;
}
.load-more:hover {
    text-decoration: none;
    background: rgba(0, 0, 0, 0.1);
}
.posts .spinner-container {
    position: relative;
    height: 100px;
}
~~~
<%= caption "client/stylesheets/style.css" %>

<%= commit "2-3","Re-arranged file structure." %>

<% note do %>

### O nota despre CoffeeScript

In aceasta carte vom scrie in pur JavaScript. Dar daca preferi CoffeeScript, Meteor te are acoperit. Pur si simplu adauga pachetul CoffeeScript si vei putea incepe:

`meteor add coffeescript`

<% end %>
